import streamlit as st
import pandas as pd
from utils.functions.general_functions import dataframe_query, execute_query


@st.cache_data
def item_sold():
  return dataframe_query(f"""
    WITH ULTIMO_VALOR AS (
      SELECT 
        IV.PRODUCT_ID,
        MAX(IV.TRANSACTION_DATE) AS MAX_DATE,
        IV.UNIT_VALUE
      FROM T_ITENS_VENDIDOS IV
      WHERE IV.UNIT_VALUE > 1
      GROUP BY IV.PRODUCT_ID
    )

    SELECT
        IVC.CASA AS 'EMPRESA',
        AIFT.ID AS 'ID_Assoc',
        IVC.ITEM_VENDIDO AS 'Item Vendido',
        IVC.CATEGORIA AS 'CATEGORIA',
        IE.ID AS 'ID Insumo de Estoque',
        IE.DESCRICAO AS 'Insumo de Estoque',
        UM.UNIDADE_MEDIDA AS 'Unidade Medida',
        AIFT.QUANTIDADE_POR_FICHA AS 'Quantidade na Ficha',
        UV.UNIT_VALUE AS 'VALOR DO ITEM'
    FROM T_ASSOCIATIVA_INSUMOS_FICHA_TECNICA AIFT
    LEFT JOIN T_FICHAS_TECNICAS FT ON AIFT.FK_FICHA_TECNICA = FT.ID
    LEFT JOIN T_VISUALIZACAO_ITENS_VENDIDOS_POR_CASA IVC ON FT.FK_ITEM_VENDIDO_POR_CASA = IVC.ID
    LEFT JOIN T_INSUMOS_ESTOQUE IE ON AIFT.FK_ITEM_ESTOQUE = IE.ID
    LEFT JOIN T_UNIDADES_DE_MEDIDAS UM ON IE.FK_UNIDADE_MEDIDA = UM.ID
    LEFT JOIN ULTIMO_VALOR UV ON UV.PRODUCT_ID = IVC.ID_ZIG_ITEM_VENDIDO

    UNION ALL

    SELECT 
        IVC.CASA AS 'EMPRESA',
        AIPFT.ID AS 'ID_Assoc',
        IVC.ITEM_VENDIDO AS 'Item Vendido',
        IVC.CATEGORIA AS 'CATEGORIA',
        'IP' AS 'ID Insumo de Estoque',
        IP.NOME_ITEM_PRODUZIDO AS 'Insumo de Estoque',
        UM.UNIDADE_MEDIDA AS 'Unidade Medida',
        AIPFT.QUANTIDADE AS 'Quantidade na Ficha',
        UV.UNIT_VALUE AS 'VALOR DO ITEM'
    FROM T_ASSOCIATIVA_ITENS_PRODUCAO_FICHA_TECNICA AIPFT
    LEFT JOIN T_FICHAS_TECNICAS FT ON AIPFT.FK_FICHA_TECNICA = FT.ID
    LEFT JOIN T_VISUALIZACAO_ITENS_VENDIDOS_POR_CASA IVC ON FT.FK_ITEM_VENDIDO_POR_CASA = IVC.ID
    LEFT JOIN T_ITENS_PRODUCAO IP ON AIPFT.FK_ITEM_PRODUCAO = IP.ID
    LEFT JOIN T_UNIDADES_DE_MEDIDAS UM ON IP.FK_UNIDADE_MEDIDA = UM.ID
    LEFT JOIN ULTIMO_VALOR UV ON UV.PRODUCT_ID = IVC.ID_ZIG_ITEM_VENDIDO
    ORDER BY `Item Vendido`;
    """)


@st.cache_data
def input_produced(day, day2):
    return dataframe_query(f"""
        SELECT
            E.NOME_FANTASIA AS 'EMPRESA',
            IP.NOME_ITEM_PRODUZIDO AS 'ITEM PRODUZIDO',
            FTP.QUANTIDADE_FICHA AS 'RENDIMENTO',
            COALESCE(IE.DESCRICAO, IP2.NOME_ITEM_PRODUZIDO) AS 'Insumo de Estoque',
            AFTIP.QUANTIDADE AS 'QUANTIDADE INSUMO',
            #(DRI.VALOR / DRI.QUANTIDADE) AS 'Média Preço (Insumo de Compra)',
            ((DRI.VALOR / DRI.QUANTIDADE) / ACE.PROPORCAO) AS 'MÉDIA PREÇO NO ITEM KG',
            (AFTIP.QUANTIDADE / 1000) * ((DRI.VALOR / DRI.QUANTIDADE) / ACE.PROPORCAO) AS 'VALOR PRODUÇÃO'
        FROM T_ITENS_PRODUCAO IP
        LEFT JOIN T_EMPRESAS E ON E.ID = IP.FK_EMPRESA
        LEFT JOIN T_FICHA_TECNICA_PRODUCAO FTP ON FTP.FK_ITEM_PRODUZIDO = IP.ID
        LEFT JOIN T_ASSOCIATIVA_FICHAS_TECNICAS_ITENS_PRODUCAO AFTIP ON AFTIP.FK_FICHA_PRODUCAO = FTP.ID
        LEFT JOIN T_ITENS_PRODUCAO IP2 ON IP2.ID = AFTIP.FK_ITEM_PRODUZIDO 
        LEFT JOIN T_INSUMOS_ESTOQUE IE ON IE.ID = AFTIP.FK_INSUMO_ESTOQUE
        LEFT JOIN T_ASSOCIATIVA_COMPRA_ESTOQUE ACE ON IE.ID = ACE.FK_INSUMO_ESTOQUE
        LEFT JOIN T_INSUMOS_NIVEL_5 N5 ON ACE.FK_INSUMO = N5.ID
        LEFT JOIN T_INSUMOS_NIVEL_4 N4 ON N4.ID = N5.FK_INSUMOS_NIVEL_4
        LEFT JOIN T_INSUMOS_NIVEL_3 N3 ON N3.ID = N4.FK_INSUMOS_NIVEL_3
        LEFT JOIN T_INSUMOS_NIVEL_2 N2 ON N2.ID = N3.FK_INSUMOS_NIVEL_2
        LEFT JOIN T_INSUMOS_NIVEL_1 N1 ON N1.ID = N2.FK_INSUMOS_NIVEL_1
        LEFT JOIN (
            SELECT
                DRI.ID,
                DR.COMPETENCIA,
                E2.NOME_FANTASIA,
                E2.ID AS ID_CASA,
                DRI.FK_INSUMO,
                DRI.QUANTIDADE,
                DRI.VALOR,
                ACE.FK_INSUMO_ESTOQUE,
                ACE.PROPORCAO
            FROM T_DESPESA_RAPIDA_ITEM DRI
            INNER JOIN T_DESPESA_RAPIDA DR ON DR.ID = DRI.FK_DESPESA_RAPIDA
            LEFT JOIN T_ASSOCIATIVA_COMPRA_ESTOQUE ACE ON ACE.FK_INSUMO = DRI.FK_INSUMO
            LEFT JOIN T_EMPRESAS E2 ON E2.ID = DR.FK_LOJA
            WHERE DATE(DR.COMPETENCIA) >= '{day}' AND DATE(DR.COMPETENCIA) <= '{day2}'
            AND DRI.VALOR > 0
            GROUP BY DRI.ID
        ) AS DRI ON DRI.FK_INSUMO = N5.ID
        LEFT JOIN T_CONTAGEM_INSUMOS CI ON CI.FK_INSUMO = N5.ID
        WHERE (DATE(CI.DATA_CONTAGEM) >= '{day}' 
        AND DATE(CI.DATA_CONTAGEM) <= '{day2}' OR CI.DATA_CONTAGEM IS NULL)
        AND FTP.ID IS NOT NULL
        AND N1.DESCRICAO IN ('BEBIDAS','ALIMENTOS')
        GROUP BY E.ID, IP.ID, IE.ID
        ORDER BY IP.NOME_ITEM_PRODUZIDO
""")


@st.cache_data
def GET_AVG_PRICE_INPUT_N5(day, day2):
  return dataframe_query(f"""
SELECT 
    E.ID AS 'CASA ID',
    E.NOME_FANTASIA AS 'EMPRESA',
    N5.ID AS 'ID N5',
    N5.DESCRICAO AS 'INSUMO N5',
    UM.UNIDADE_MEDIDA_NAME AS 'Unidade de  Medida N5',
    SUM(DRI.VALOR) / SUM(DRI.QUANTIDADE) AS 'Média Preço (Insumo de Compra)',
    IE.ID AS 'ID Insumo de Estoque',
    IE.DESCRICAO AS 'Insumo de Estoque',
    UM2.UNIDADE_MEDIDA_NAME AS 'Unidade de Medida Estoque',
    ROUND(CAST(SUM(DRI.VALOR) AS FLOAT), 2) AS 'VALOR DRI',
    ROUND(CAST(SUM(DRI.QUANTIDADE) AS FLOAT), 3) AS 'QUANTIDADE DRI',
    ACE.PROPORCAO AS 'PROPORÇÃO ACE',
    (SUM(DRI.VALOR) / SUM(DRI.QUANTIDADE)) / ACE.PROPORCAO AS 'Média Preço (Insumo Estoque)'
  
    FROM T_DESPESA_RAPIDA_ITEM DRI 
    INNER JOIN T_INSUMOS_NIVEL_5 N5 ON (DRI.FK_INSUMO = N5.ID)
    LEFT JOIN T_INSUMOS_NIVEL_4 N4 ON N4.ID = N5.FK_INSUMOS_NIVEL_4
    LEFT JOIN T_INSUMOS_NIVEL_3 N3 ON N3.ID = N4.FK_INSUMOS_NIVEL_3
    LEFT JOIN T_INSUMOS_NIVEL_2 N2 ON N2.ID = N3.FK_INSUMOS_NIVEL_2
    LEFT JOIN T_INSUMOS_NIVEL_1 N1 ON N1.ID = N2.FK_INSUMOS_NIVEL_1
    INNER JOIN T_DESPESA_RAPIDA DR ON (DRI.FK_DESPESA_RAPIDA = DR.ID)
    INNER JOIN T_EMPRESAS E ON (DR.FK_LOJA = E.ID)
    LEFT JOIN T_UNIDADES_DE_MEDIDAS UM ON (N5.FK_UNIDADE_MEDIDA = UM.ID)
    LEFT JOIN T_ASSOCIATIVA_COMPRA_ESTOQUE ACE ON (ACE.FK_INSUMO = N5.ID)
    LEFT JOIN T_INSUMOS_ESTOQUE IE ON (IE.ID = ACE.FK_INSUMO_ESTOQUE)
    LEFT JOIN T_UNIDADES_DE_MEDIDAS UM2 ON IE.FK_UNIDADE_MEDIDA = UM2.ID
    WHERE STR_TO_DATE(DR.COMPETENCIA, '%Y-%m-%d') >= '{day}'
    AND STR_TO_DATE(DR.COMPETENCIA, '%Y-%m-%d') <= '{day2}'
    AND N1.DESCRICAO IN ('BEBIDAS','ALIMENTOS')
    GROUP BY E.ID, N5.ID
    ORDER BY N5.DESCRICAO
""")


# CMV Teórico

def GET_FICHAS_TECNICAS_DE_ITENS_VENDIDOS_PARA_INSUMOS_ESTOQUE():
    return dataframe_query(f'''
        SELECT
            VIVC.ID_CASA AS 'ID Casa',
            VIVC.CASA AS 'Casa',
            VIVC.ID_ITEM_VENDIDO AS 'ID Item Zig',
            VIVC.ITEM_VENDIDO AS 'Item Vendido Zig',
            FT.ID AS 'ID Ficha Técnica',
            IE.ID AS 'ID Insumo Estoque',
            IE.DESCRICAO AS 'Insumo Estoque',
            AIFT.QUANTIDADE_POR_FICHA AS 'Quantidade na Ficha',
            UM.UNIDADE_MEDIDA AS 'Unidade Medida',
            0 AS 'Produção?'
        FROM T_FICHAS_TECNICAS FT
        LEFT JOIN T_VISUALIZACAO_ITENS_VENDIDOS_POR_CASA VIVC ON FT.FK_ITEM_VENDIDO_POR_CASA = VIVC.ID
        LEFT JOIN T_ASSOCIATIVA_INSUMOS_FICHA_TECNICA AIFT ON AIFT.FK_FICHA_TECNICA = FT.ID
        LEFT JOIN T_UNIDADES_DE_MEDIDAS UM ON AIFT.FK_UNIDADE_MEDIDA = UM.ID
        INNER JOIN T_INSUMOS_ESTOQUE IE ON AIFT.FK_ITEM_ESTOQUE = IE.ID
        GROUP BY VIVC.ID_CASA, FT.ID, IE.ID
    ''')


def GET_FICHAS_TECNICAS_DE_ITENS_VENDIDOS_PARA_ITENS_PRODUCAO():
    return dataframe_query(f'''
        SELECT
            VIVC.ID_CASA AS 'ID Casa',
            VIVC.CASA AS 'Casa',
            VIVC.ID_ITEM_VENDIDO AS 'ID Item Zig',
            VIVC.ITEM_VENDIDO AS 'Item Vendido Zig',
            FT.ID AS 'ID Ficha Técnica',
            IP.ID AS 'ID Insumo Produção',
            IP.NOME_ITEM_PRODUZIDO AS 'Insumo Produção',
            AIPFT.QUANTIDADE AS 'Quantidade na Ficha',
            UM.UNIDADE_MEDIDA AS 'Unidade Medida',
            1 AS 'Produção?'
        FROM T_FICHAS_TECNICAS FT
        LEFT JOIN T_VISUALIZACAO_ITENS_VENDIDOS_POR_CASA VIVC ON FT.FK_ITEM_VENDIDO_POR_CASA = VIVC.ID
        LEFT JOIN T_ASSOCIATIVA_ITENS_PRODUCAO_FICHA_TECNICA AIPFT ON AIPFT.FK_FICHA_TECNICA = FT.ID
        LEFT JOIN T_UNIDADES_DE_MEDIDAS UM ON AIPFT.FK_UNIDADE_MEDIDA = UM.ID
        INNER JOIN T_ITENS_PRODUCAO IP ON AIPFT.FK_ITEM_PRODUCAO = IP.ID
        GROUP BY VIVC.ID_CASA, FT.ID, IP.ID
    ''')


def GET_FICHAS_TECNICAS_DE_INSUMOS_PRODUCAO():
    return dataframe_query(f'''
        SELECT
            te.ID AS 'ID Casa',
            te.NOME_FANTASIA AS 'Casa',
            tftp.ID AS 'ID Ficha Técnica Produção',
            tip.ID AS 'ID Item Produzido',
            tip.NOME_ITEM_PRODUZIDO AS 'Item Produzido',
            tftp.QUANTIDADE_FICHA AS 'Quantidade Rendimento',
            tudm2.UNIDADE_MEDIDA AS 'U.M. Rendimento',
            tie.ID AS 'ID Insumo Estoque',
            tie.DESCRICAO AS 'Insumo Estoque',
            tip2.ID AS 'ID Insumo Produção',
            tip2.NOME_ITEM_PRODUZIDO AS 'Insumo Produção',
            taftip.QUANTIDADE AS 'Quantidade',
            tudm.UNIDADE_MEDIDA AS 'U.M. Ficha Itens',
            CASE WHEN tip2.ID IS NULL THEN 0 ELSE 1 END AS 'Produção?'
        FROM
            T_FICHA_TECNICA_PRODUCAO tftp
            LEFT JOIN T_ITENS_PRODUCAO tip ON tip.ID = tftp.FK_ITEM_PRODUZIDO
            LEFT JOIN T_UNIDADES_DE_MEDIDAS tudm2 ON tudm2.ID = tftp.FK_UNIDADE_MEDIDA
            LEFT JOIN T_ASSOCIATIVA_FICHAS_TECNICAS_ITENS_PRODUCAO taftip ON taftip.FK_FICHA_PRODUCAO = tftp.ID
            LEFT JOIN T_EMPRESAS te ON te.ID = tip.FK_EMPRESA
            LEFT JOIN T_INSUMOS_ESTOQUE tie ON tie.ID = taftip.FK_INSUMO_ESTOQUE
            LEFT JOIN T_UNIDADES_DE_MEDIDAS tudm ON tudm.ID = taftip.UNIDADE_MEDIDA
            LEFT JOIN T_ITENS_PRODUCAO tip2 ON tip2.ID = taftip.FK_ITEM_PRODUZIDO
    ''')


@st.cache_data
def GET_PRECOS_INSUMOS_N5_COM_PROPORCAO_ESTOQUE():
    return dataframe_query(f'''
        SELECT 
            E.ID AS 'ID Casa',
            E.NOME_FANTASIA AS 'Casa',
            DATE(DR.COMPETENCIA) AS 'Data Compra',
            MONTH(DR.COMPETENCIA) AS 'Mês Compra',
            YEAR(DR.COMPETENCIA) AS 'Ano Compra',
            N5.ID AS 'ID N5',
            N5.DESCRICAO AS 'Insumo N5',
            UM.UNIDADE_MEDIDA_NAME AS 'U.M. N5',
            ROUND(CAST(SUM(DRI.VALOR) AS FLOAT), 2) AS 'Valor N5',
            ROUND(CAST(SUM(DRI.QUANTIDADE) AS FLOAT), 3) AS 'Quantidade N5',
            SUM(DRI.VALOR) / SUM(DRI.QUANTIDADE) AS 'Preço Médio N5',
            IE.ID AS 'ID Insumo Estoque',
            IE.DESCRICAO AS 'Insumo Estoque',
            UM2.UNIDADE_MEDIDA AS 'U.M. Insumo Estoque',
            ACE.PROPORCAO AS 'Proporção ACE',
            ACE.PROPORCAO * ROUND(CAST(SUM(DRI.QUANTIDADE) AS FLOAT), 3) AS 'Quantidade Insumo Estoque',
            (SUM(DRI.VALOR) / SUM(DRI.QUANTIDADE)) / ACE.PROPORCAO AS 'Preço Médio Insumo N5 Estoque'
        FROM T_DESPESA_RAPIDA_ITEM DRI 
            INNER JOIN T_INSUMOS_NIVEL_5 N5 ON (DRI.FK_INSUMO = N5.ID)
            LEFT JOIN T_INSUMOS_NIVEL_4 N4 ON N4.ID = N5.FK_INSUMOS_NIVEL_4
            LEFT JOIN T_INSUMOS_NIVEL_3 N3 ON N3.ID = N4.FK_INSUMOS_NIVEL_3
            LEFT JOIN T_INSUMOS_NIVEL_2 N2 ON N2.ID = N3.FK_INSUMOS_NIVEL_2
            LEFT JOIN T_INSUMOS_NIVEL_1 N1 ON N1.ID = N2.FK_INSUMOS_NIVEL_1
            INNER JOIN T_DESPESA_RAPIDA DR ON (DRI.FK_DESPESA_RAPIDA = DR.ID)
            INNER JOIN T_EMPRESAS E ON (DR.FK_LOJA = E.ID)
            LEFT JOIN T_UNIDADES_DE_MEDIDAS UM ON (N5.FK_UNIDADE_MEDIDA = UM.ID)
            LEFT JOIN T_ASSOCIATIVA_COMPRA_ESTOQUE ACE ON (ACE.FK_INSUMO = N5.ID)
            LEFT JOIN T_INSUMOS_ESTOQUE IE ON (IE.ID = ACE.FK_INSUMO_ESTOQUE)
            LEFT JOIN T_UNIDADES_DE_MEDIDAS UM2 ON IE.FK_UNIDADE_MEDIDA = UM2.ID
        WHERE DR.COMPETENCIA >= '2023-01-01'
            AND N1.DESCRICAO IN ('BEBIDAS','ALIMENTOS')
        GROUP BY E.ID, N5.ID
        ORDER BY E.NOME_FANTASIA ASC, N5.DESCRICAO
''')


def GET_CASAS_ITENS_PRODUCAO():
    return dataframe_query(f'''
        SELECT
        ID AS 'ID Insumo Produção',
        FK_EMPRESA AS 'ID Casa Produção'
        FROM T_ITENS_PRODUCAO
    ''')